export declare function isObject(item: any): any;
export declare function deepEquals(v1: any, v2: any): boolean;
export declare function deepCopy(v: any): any;
export type ValueOf<T> = T[keyof T];
export declare function objKeys<T extends string | number>(obj: Record<T, any>): T[];
export declare function objLength(obj: Record<any, any>): number;
export declare function isObjEmpty(obj: Record<any, any>): boolean;
export declare function objMapEntries<M extends Record<K, I>, K extends keyof M, O, I = ValueOf<M>>(obj: M, func: (k: K, v: I) => O): [K, O][];
export declare function objMap<M extends Record<K, I>, K extends keyof M, O, I = ValueOf<M>>(obj: M, func: (k: K, v: I) => O): Record<K, O>;
export declare function objFilter<K extends string, I, O extends I>(obj: Record<K, I>, func: (k: K, v: I) => v is O): Record<K, O>;
export declare function deepFind<I extends object, O extends I>(obj: I, func: (v: I) => v is O, depth?: number): O | undefined;
export declare function promiseObjAll<K extends string, V>(obj: {
    [key in K]: Promise<V>;
}): Promise<Record<K, V>>;
export declare function pick<K extends string, V = any>(obj: Record<K, V>, keys: K[]): Record<K, V>;
export declare function objMerge(a: Record<string, any>, b: Record<string, any>, max_depth?: number): any;
export declare function invertKeysAndValues(data: any): any;
export declare function arrayToObject(keys: Array<string>, val?: boolean): Record<string, boolean>;
export declare function stringifyObject(object: object, format?: 'json' | 'yaml', space?: number): string;
//# sourceMappingURL=objects.d.ts.map