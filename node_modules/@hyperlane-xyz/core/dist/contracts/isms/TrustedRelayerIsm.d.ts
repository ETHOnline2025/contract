import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common.js";
export interface TrustedRelayerIsmInterface extends utils.Interface {
    functions: {
        "mailbox()": FunctionFragment;
        "moduleType()": FunctionFragment;
        "trustedRelayer()": FunctionFragment;
        "verify(bytes,bytes)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "mailbox" | "mailbox()" | "moduleType" | "moduleType()" | "trustedRelayer" | "trustedRelayer()" | "verify" | "verify(bytes,bytes)"): FunctionFragment;
    encodeFunctionData(functionFragment: "mailbox", values?: undefined): string;
    encodeFunctionData(functionFragment: "mailbox()", values?: undefined): string;
    encodeFunctionData(functionFragment: "moduleType", values?: undefined): string;
    encodeFunctionData(functionFragment: "moduleType()", values?: undefined): string;
    encodeFunctionData(functionFragment: "trustedRelayer", values?: undefined): string;
    encodeFunctionData(functionFragment: "trustedRelayer()", values?: undefined): string;
    encodeFunctionData(functionFragment: "verify", values: [BytesLike, BytesLike]): string;
    encodeFunctionData(functionFragment: "verify(bytes,bytes)", values: [BytesLike, BytesLike]): string;
    decodeFunctionResult(functionFragment: "mailbox", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mailbox()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moduleType", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "moduleType()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedRelayer", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "trustedRelayer()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "verify(bytes,bytes)", data: BytesLike): Result;
    events: {};
}
export interface TrustedRelayerIsm extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TrustedRelayerIsmInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        mailbox(overrides?: CallOverrides): Promise<[string]>;
        "mailbox()"(overrides?: CallOverrides): Promise<[string]>;
        moduleType(overrides?: CallOverrides): Promise<[number]>;
        "moduleType()"(overrides?: CallOverrides): Promise<[number]>;
        trustedRelayer(overrides?: CallOverrides): Promise<[string]>;
        "trustedRelayer()"(overrides?: CallOverrides): Promise<[string]>;
        verify(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
        "verify(bytes,bytes)"(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
    };
    mailbox(overrides?: CallOverrides): Promise<string>;
    "mailbox()"(overrides?: CallOverrides): Promise<string>;
    moduleType(overrides?: CallOverrides): Promise<number>;
    "moduleType()"(overrides?: CallOverrides): Promise<number>;
    trustedRelayer(overrides?: CallOverrides): Promise<string>;
    "trustedRelayer()"(overrides?: CallOverrides): Promise<string>;
    verify(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    "verify(bytes,bytes)"(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    callStatic: {
        mailbox(overrides?: CallOverrides): Promise<string>;
        "mailbox()"(overrides?: CallOverrides): Promise<string>;
        moduleType(overrides?: CallOverrides): Promise<number>;
        "moduleType()"(overrides?: CallOverrides): Promise<number>;
        trustedRelayer(overrides?: CallOverrides): Promise<string>;
        "trustedRelayer()"(overrides?: CallOverrides): Promise<string>;
        verify(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
        "verify(bytes,bytes)"(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<boolean>;
    };
    filters: {};
    estimateGas: {
        mailbox(overrides?: CallOverrides): Promise<BigNumber>;
        "mailbox()"(overrides?: CallOverrides): Promise<BigNumber>;
        moduleType(overrides?: CallOverrides): Promise<BigNumber>;
        "moduleType()"(overrides?: CallOverrides): Promise<BigNumber>;
        trustedRelayer(overrides?: CallOverrides): Promise<BigNumber>;
        "trustedRelayer()"(overrides?: CallOverrides): Promise<BigNumber>;
        verify(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
        "verify(bytes,bytes)"(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        mailbox(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "mailbox()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        moduleType(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "moduleType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        trustedRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "trustedRelayer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
        verify(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "verify(bytes,bytes)"(arg0: BytesLike, message: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TrustedRelayerIsm.d.ts.map