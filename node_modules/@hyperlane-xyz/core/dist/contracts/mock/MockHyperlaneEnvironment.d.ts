import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, Overrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "../../common.js";
export interface MockHyperlaneEnvironmentInterface extends utils.Interface {
    functions: {
        "igps(uint32)": FunctionFragment;
        "isms(uint32)": FunctionFragment;
        "mailboxes(uint32)": FunctionFragment;
        "processNextPendingMessage()": FunctionFragment;
        "processNextPendingMessageFromDestination()": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "igps" | "igps(uint32)" | "isms" | "isms(uint32)" | "mailboxes" | "mailboxes(uint32)" | "processNextPendingMessage" | "processNextPendingMessage()" | "processNextPendingMessageFromDestination" | "processNextPendingMessageFromDestination()"): FunctionFragment;
    encodeFunctionData(functionFragment: "igps", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "igps(uint32)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isms", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "isms(uint32)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "mailboxes", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "mailboxes(uint32)", values: [BigNumberish]): string;
    encodeFunctionData(functionFragment: "processNextPendingMessage", values?: undefined): string;
    encodeFunctionData(functionFragment: "processNextPendingMessage()", values?: undefined): string;
    encodeFunctionData(functionFragment: "processNextPendingMessageFromDestination", values?: undefined): string;
    encodeFunctionData(functionFragment: "processNextPendingMessageFromDestination()", values?: undefined): string;
    decodeFunctionResult(functionFragment: "igps", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "igps(uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isms", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "isms(uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mailboxes", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "mailboxes(uint32)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "processNextPendingMessage", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "processNextPendingMessage()", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "processNextPendingMessageFromDestination", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "processNextPendingMessageFromDestination()", data: BytesLike): Result;
    events: {};
}
export interface MockHyperlaneEnvironment extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: MockHyperlaneEnvironmentInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        "igps(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        "isms(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        mailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        "mailboxes(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
        processNextPendingMessage(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "processNextPendingMessage()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        processNextPendingMessageFromDestination(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
        "processNextPendingMessageFromDestination()"(overrides?: Overrides & {
            from?: string;
        }): Promise<ContractTransaction>;
    };
    igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    "igps(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    "isms(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    mailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    "mailboxes(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
    processNextPendingMessage(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "processNextPendingMessage()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    processNextPendingMessageFromDestination(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    "processNextPendingMessageFromDestination()"(overrides?: Overrides & {
        from?: string;
    }): Promise<ContractTransaction>;
    callStatic: {
        igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "igps(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "isms(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        mailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        "mailboxes(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;
        processNextPendingMessage(overrides?: CallOverrides): Promise<void>;
        "processNextPendingMessage()"(overrides?: CallOverrides): Promise<void>;
        processNextPendingMessageFromDestination(overrides?: CallOverrides): Promise<void>;
        "processNextPendingMessageFromDestination()"(overrides?: CallOverrides): Promise<void>;
    };
    filters: {};
    estimateGas: {
        igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "igps(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "isms(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        mailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        "mailboxes(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
        processNextPendingMessage(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "processNextPendingMessage()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        processNextPendingMessageFromDestination(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
        "processNextPendingMessageFromDestination()"(overrides?: Overrides & {
            from?: string;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        igps(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "igps(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        isms(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "isms(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        mailboxes(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        "mailboxes(uint32)"(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        processNextPendingMessage(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "processNextPendingMessage()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        processNextPendingMessageFromDestination(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
        "processNextPendingMessageFromDestination()"(overrides?: Overrides & {
            from?: string;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=MockHyperlaneEnvironment.d.ts.map