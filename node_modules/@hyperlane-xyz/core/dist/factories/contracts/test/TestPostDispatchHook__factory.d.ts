import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestPostDispatchHook, TestPostDispatchHookInterface } from "../../../contracts/test/TestPostDispatchHook.js";
type TestPostDispatchHookConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TestPostDispatchHook__factory extends ContractFactory {
    constructor(...args: TestPostDispatchHookConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<TestPostDispatchHook>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): TestPostDispatchHook;
    connect(signer: Signer): TestPostDispatchHook__factory;
    static readonly bytecode = "0x60806040526000805534801561001457600080fd5b50610362806100246000396000f3fe6080604052600436106100705760003560e01c8063ddca3f431161004e578063ddca3f43146100e3578063e445e7dd146100f9578063e5320bb914610115578063f667ee911461014857600080fd5b8063086011b91461007557806369fe0e2d1461008a578063aaccd230146100aa575b600080fd5b610088610083366004610265565b610178565b005b34801561009657600080fd5b506100886100a53660046102d1565b600055565b3480156100b657600080fd5b506100d06100c5366004610265565b505060005492915050565b6040519081526020015b60405180910390f35b3480156100ef57600080fd5b506100d060005481565b34801561010557600080fd5b50604051600081526020016100da565b34801561012157600080fd5b506101386101303660046102ea565b600192915050565b60405190151581526020016100da565b34801561015457600080fd5b506101386101633660046102d1565b60016020526000908152604090205460ff1681565b6101848484848461018a565b50505050565b60018060006101ce85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061021192505050565b8152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905550505050565b805160209091012090565b60008083601f84011261022e57600080fd5b50813567ffffffffffffffff81111561024657600080fd5b60208301915083602082850101111561025e57600080fd5b9250929050565b6000806000806040858703121561027b57600080fd5b843567ffffffffffffffff8082111561029357600080fd5b61029f8883890161021c565b909650945060208701359150808211156102b857600080fd5b506102c58782880161021c565b95989497509550505050565b6000602082840312156102e357600080fd5b5035919050565b600080602083850312156102fd57600080fd5b823567ffffffffffffffff81111561031457600080fd5b6103208582860161021c565b9096909550935050505056fea2646970667358221220d597660da47b708ebc4124d78182bac56415531b3bb59c7c24ff07fb5a25f33764736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "fee";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "hookType";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "messageId";
            readonly type: "bytes32";
        }];
        readonly name: "messageDispatched";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "dispatched";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "metadata";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "postDispatch";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "metadata";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "quoteDispatch";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_fee";
            readonly type: "uint256";
        }];
        readonly name: "setFee";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "supportsMetadata";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): TestPostDispatchHookInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TestPostDispatchHook;
}
export {};
//# sourceMappingURL=TestPostDispatchHook__factory.d.ts.map