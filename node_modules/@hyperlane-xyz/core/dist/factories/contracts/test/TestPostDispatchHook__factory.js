/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [],
        name: "fee",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "hookType",
        outputs: [
            {
                internalType: "uint8",
                name: "",
                type: "uint8",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes32",
                name: "messageId",
                type: "bytes32",
            },
        ],
        name: "messageDispatched",
        outputs: [
            {
                internalType: "bool",
                name: "dispatched",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "metadata",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "message",
                type: "bytes",
            },
        ],
        name: "postDispatch",
        outputs: [],
        stateMutability: "payable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "metadata",
                type: "bytes",
            },
            {
                internalType: "bytes",
                name: "message",
                type: "bytes",
            },
        ],
        name: "quoteDispatch",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "_fee",
                type: "uint256",
            },
        ],
        name: "setFee",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        name: "supportsMetadata",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x60806040526000805534801561001457600080fd5b50610362806100246000396000f3fe6080604052600436106100705760003560e01c8063ddca3f431161004e578063ddca3f43146100e3578063e445e7dd146100f9578063e5320bb914610115578063f667ee911461014857600080fd5b8063086011b91461007557806369fe0e2d1461008a578063aaccd230146100aa575b600080fd5b610088610083366004610265565b610178565b005b34801561009657600080fd5b506100886100a53660046102d1565b600055565b3480156100b657600080fd5b506100d06100c5366004610265565b505060005492915050565b6040519081526020015b60405180910390f35b3480156100ef57600080fd5b506100d060005481565b34801561010557600080fd5b50604051600081526020016100da565b34801561012157600080fd5b506101386101303660046102ea565b600192915050565b60405190151581526020016100da565b34801561015457600080fd5b506101386101633660046102d1565b60016020526000908152604090205460ff1681565b6101848484848461018a565b50505050565b60018060006101ce85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061021192505050565b8152602081019190915260400160002080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001691151591909117905550505050565b805160209091012090565b60008083601f84011261022e57600080fd5b50813567ffffffffffffffff81111561024657600080fd5b60208301915083602082850101111561025e57600080fd5b9250929050565b6000806000806040858703121561027b57600080fd5b843567ffffffffffffffff8082111561029357600080fd5b61029f8883890161021c565b909650945060208701359150808211156102b857600080fd5b506102c58782880161021c565b95989497509550505050565b6000602082840312156102e357600080fd5b5035919050565b600080602083850312156102fd57600080fd5b823567ffffffffffffffff81111561031457600080fd5b6103208582860161021c565b9096909550935050505056fea2646970667358221220d597660da47b708ebc4124d78182bac56415531b3bb59c7c24ff07fb5a25f33764736f6c63430008130033";
const isSuperArgs = (xs) => xs.length > 1;
export class TestPostDispatchHook__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
//# sourceMappingURL=TestPostDispatchHook__factory.js.map